package sykam;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import junit.framework.Assert;

public class DataComparisionTxt_Excel {

	static List<String> l = new ArrayList<>();
	static XSSFWorkbook workbook = new XSSFWorkbook();
	static XSSFSheet sheet = workbook.createSheet("Comparision");
	static XSSFRow row1;
	static int rownum = 0;
	static String excelFilePath = "C:\\Users\\1543357\\Desktop\\Projects\\2019_Projects\\DataVerification\\data2\\excelFilePath8.xlsx";

	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws IOException {

		// Open the file
		FileInputStream fstream = new FileInputStream("C:\\Users\\1543357\\Genie4Projects\\APITesting\\X12.txt");
		BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
		String strLine;
		// Read File Line By Line
		while ((strLine = br.readLine()) != null) {
			String[] array = strLine.replace('~', ' ').split("\\*");
			List<String> l = Arrays.asList(array);
			@SuppressWarnings("unchecked")
			List<String> el = readExcelDataa(array[0]);

			for (int i = 1; i < array.length; i++) {
				XSSFRow row = sheet.createRow(rownum++);
				int cellnum = 0;
				XSSFCell cell = row.createCell((int) cellnum++);
				cell.setCellValue(array[i].trim());
				XSSFCell cell1 = row.createCell(cellnum++);
				cell1.setCellValue(el.get(i - 1).trim());
				if (array[i].trim().isEmpty() && el.get(i - 1).trim().isEmpty()) {
					XSSFCell cell4 = row.createCell(cellnum++);
					cell4.setCellValue(true);
				} else {

					XSSFCell cell2 = row.createCell(cellnum++);
					cell2.setCellValue(el.get(i - 1).trim().toUpperCase().contains(array[i].trim().toUpperCase()));
				}
			}
			System.out.println();
			XSSFRow row = sheet.createRow(rownum++);
			XSSFCell cell = row.createCell(0);
			cell.setCellValue("Line Validation Completed. Proceding with next line validation if any..");

		}
		// Close the input stream
		fstream.close();
		try {

			FileOutputStream out1 = new FileOutputStream(excelFilePath);
			workbook.write(out1);
			out1.close();
			System.out.println("Comparision Results written to Excel successfully at " + excelFilePath);
		}

		catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static List readExcelDataa(String s) {
		List<String> m = new ArrayList<>();
		try {
			FileInputStream file = new FileInputStream(
					new File("C:\\Users\\1543357\\Genie4Projects\\APITesting\\Optum DM1.xlsx"));
			// Create Workbook instance holding reference to .xlsx file
			XSSFWorkbook workbook = new XSSFWorkbook(file);
			// Get first/desired sheet from the workbook
			XSSFSheet sheet = workbook.getSheetAt(0);
			// Iterate through each rows one by one
			Iterator<Row> rowIterator = sheet.iterator();
			while (rowIterator.hasNext()) {
				Row row = rowIterator.next();
				DataFormatter formatter = new DataFormatter();
				String regex = "(.)*(\\d)(.)*";
				// String regex = "(.)*";
				Pattern pattern = Pattern.compile(regex);
				Matcher matcher = pattern.matcher(formatter.formatCellValue(row.getCell(4)));
				if (matcher.matches() && formatter.formatCellValue(row.getCell(4)).contains(s)) {
					m.add(formatter.formatCellValue(row.getCell(5)));
				}
			}
			file.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return m;
	}

}
